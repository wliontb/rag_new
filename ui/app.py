import streamlit as st
import sys
import os

# Th√™m ƒë∆∞·ªùng d·∫´n g·ªëc c·ªßa d·ª± √°n v√†o sys.path
# ƒë·ªÉ c√≥ th·ªÉ import c√°c module t·ª´ c√°c th∆∞ m·ª•c kh√°c
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, project_root)

from rag_core.agent import QueryAgent
from config import settings

# Ch·ªâ set page config n·∫øu ch∆∞a ƒë∆∞·ª£c set
if 'page_config_set' not in st.session_state:
    st.set_page_config(page_title="H·ªá th·ªëng RAG - Tin t·ª©c T√†i ch√≠nh VN", layout="wide")
    st.session_state.page_config_set = True

def run_chat_interface():
    """Ch·∫°y giao di·ªán chat ch√≠nh."""

    
    st.title("H·ªèi ƒë√°p v·ªÅ Tin t·ª©c T√†i ch√≠nh Vi·ªát Nam")
    st.write("""
    Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng H·ªèi-ƒê√°p th√¥ng minh, chuy√™n s√¢u v·ªÅ lƒ©nh v·ª±c t√†i ch√≠nh Vi·ªát Nam. 
    ƒê·∫∑t c√¢u h·ªèi v√†o √¥ b√™n d∆∞·ªõi v√† nh·∫≠n c√¢u tr·∫£ l·ªùi ƒë∆∞·ª£c t·ªïng h·ª£p t·ª´ c√°c ngu·ªìn tin t·ª©c uy t√≠n.
    """)

    # --- Ch·ªçn Embedding Model/Collection --- #
    st.sidebar.title("‚öôÔ∏è C·∫•u h√¨nh H·ªá th·ªëng")

    # Dropdown ch·ªçn embedding model
    embedding_options = {
        "vietnamese": "Vietnamese BiEncoder (Ti·∫øng Vi·ªát t·ªëi ∆∞u)",
        "nomic": "Nomic Embed v1.5 (ƒêa ng√¥n ng·ªØ)"
    }

    selected_embedding = st.sidebar.selectbox(
        "Ch·ªçn m√¥ h√¨nh Embedding:",
        options=list(embedding_options.keys()),
        format_func=lambda x: embedding_options[x],
        key="embedding_selection"
    )

    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ collection ƒë∆∞·ª£c ch·ªçn
    st.sidebar.info(f"""
    **Collection hi·ªán t·∫°i:** `{settings.CHROMA_COLLECTION_NAME}_{selected_embedding}`

    **M√¥ h√¨nh:** `{settings.EMBEDDING_MODELS[selected_embedding]}`
    """)

    # --- Kh·ªüi t·∫°o Agent --- #
    # Reset agent n·∫øu embedding model thay ƒë·ªïi
    if 'current_embedding' not in st.session_state:
        st.session_state.current_embedding = selected_embedding

    if st.session_state.current_embedding != selected_embedding:
        st.session_state.current_embedding = selected_embedding
        if 'agent' in st.session_state:
            del st.session_state.agent
        st.rerun()

    # Kh·ªüi t·∫°o agent v·ªõi embedding ƒë∆∞·ª£c ch·ªçn
    if 'agent' not in st.session_state:
        with st.spinner(f"ƒêang kh·ªüi t·∫°o h·ªá th·ªëng v·ªõi {embedding_options[selected_embedding]}..."):
            try:
                st.session_state.agent = QueryAgent(embedding_method=selected_embedding)
                st.success(f"H·ªá th·ªëng ƒë√£ s·∫µn s√†ng v·ªõi {embedding_options[selected_embedding]}!")
            except Exception as e:
                st.error(f"L·ªói kh·ªüi t·∫°o h·ªá th·ªëng: {e}")
                st.stop()

    # --- Giao di·ªán ch√≠nh --- #
    col1, col2 = st.columns([3, 1])

    with col1:
        question = st.text_input(
            "**Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:**", 
            placeholder="V√≠ d·ª•: T√¨nh h√¨nh xu·∫•t kh·∫©u th·ªßy s·∫£n c·ªßa Vi·ªát Nam trong qu√Ω 2 nƒÉm nay?"
        )

    with col2:
        st.write("")  # Spacer
        search_button = st.button("üîç T√¨m ki·∫øm c√¢u tr·∫£ l·ªùi", use_container_width=True)

    # Hi·ªÉn th·ªã th·ªëng k√™ collection
    if st.sidebar.button("üìä Xem th·ªëng k√™ Collection"):
        try:
            collection_stats = st.session_state.agent.db_manager.get_collection_stats()
            st.sidebar.success(f"**S·ªë l∆∞·ª£ng documents:** {collection_stats['count']}")
            if collection_stats.get('sample_metadata'):
                st.sidebar.json(collection_stats['sample_metadata'])
        except Exception as e:
            st.sidebar.error(f"Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™: {e}")

    if search_button:
        if not question:
            st.warning("Vui l√≤ng nh·∫≠p c√¢u h·ªèi.")
        else:
            with st.spinner("ƒêang t√¨m ki·∫øm v√† t·ªïng h·ª£p c√¢u tr·∫£ l·ªùi..."):
                try:
                    answer, retrieved_docs = st.session_state.agent.answer(question)

                    if not retrieved_docs:
                        st.warning("Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa b·∫°n.")
                    else:
                        st.subheader("C√¢u tr·∫£ l·ªùi t·ªïng h·ª£p:")
                        st.markdown(answer)

                        st.subheader("C√°c ngu·ªìn th√¥ng tin ƒë∆∞·ª£c s·ª≠ d·ª•ng:")
                        for i, doc in enumerate(retrieved_docs):
                            with st.expander(f"Ngu·ªìn {i+1}: {doc.metadata.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')}"):
                                st.write(f"**Ngu·ªìn:** [{doc.metadata.get('source')}]({doc.metadata.get('source')})")
                                st.write("**N·ªôi dung tr√≠ch d·∫´n:**")
                                st.caption(doc.page_content)
                                
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
                    # Debug information
                    with st.expander("Chi ti·∫øt l·ªói (Debug)"):
                        st.code(str(e))
                        import traceback
                        st.code(traceback.format_exc())

# Ch·∫°y interface n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if __name__ == "__main__":
    run_chat_interface()
