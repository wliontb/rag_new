import streamlit as st
import sys
import os
import pandas as pd

# Th√™m ƒë∆∞·ªùng d·∫´n g·ªëc c·ªßa d·ª± √°n v√†o sys.path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, project_root)

from rag_core.db_manager import MultiEmbeddingDBManager
from config import settings

def run_collection_manager():
    """Ch·∫°y giao di·ªán qu·∫£n l√Ω collections."""
    
    st.title("üóÑÔ∏è Qu·∫£n l√Ω Collections Database")
    st.write("Trang qu·∫£n l√Ω v√† so s√°nh c√°c collections s·ª≠ d·ª•ng c√°c embedding models kh√°c nhau.")

    # --- Kh·ªüi t·∫°o Multi DB Manager --- #
    @st.cache_resource
    def get_multi_db_manager():
        return MultiEmbeddingDBManager(
            embedding_models=settings.EMBEDDING_MODELS,
            use_gpu=settings.GPU_ENABLED
        )

    multi_db = get_multi_db_manager()

    # --- Sidebar ƒëi·ªÅu khi·ªÉn --- #
    st.sidebar.title("‚öôÔ∏è ƒêi·ªÅu khi·ªÉn")

    if st.sidebar.button("üîÑ Refresh Data"):
        st.cache_resource.clear()
        st.rerun()

    # --- Hi·ªÉn th·ªã th√¥ng tin t·∫•t c·∫£ collections --- #
    st.subheader("üìä Th√¥ng tin t·∫•t c·∫£ Collections")

    collections_info = []
    for model_name, db_manager in multi_db.db_managers.items():
        stats = db_manager.get_collection_stats()
        collections_info.append({
            "Model Name": model_name,
            "Collection Name": stats["collection_name"],
            "Document Count": stats["count"],
            "Embedding Model": stats["embedding_model"],
            "GPU Enabled": stats["gpu_enabled"],
            "Status": "‚úÖ Active" if stats["count"] > 0 else "‚ö†Ô∏è Empty"
        })

    # T·∫°o DataFrame v√† hi·ªÉn th·ªã
    df_collections = pd.DataFrame(collections_info)
    st.dataframe(df_collections, use_container_width=True)

    # --- So s√°nh Collections --- #
    st.subheader("üîç So s√°nh Collections")

    col1, col2 = st.columns(2)

    with col1:
        st.write("**Collection 1: Vietnamese Embedding**")
        vietnamese_db = multi_db.get_db_manager('vietnamese')
        if vietnamese_db:
            vietnamese_stats = vietnamese_db.get_collection_stats()
            st.json(vietnamese_stats)

    with col2:
        st.write("**Collection 2: Nomic Embedding**")
        nomic_db = multi_db.get_db_manager('nomic')
        if nomic_db:
            nomic_stats = nomic_db.get_collection_stats()
            st.json(nomic_stats)

    # --- Test Query tr√™n t·∫•t c·∫£ Collections --- #
    st.subheader("üß™ Test Query tr√™n t·∫•t c·∫£ Collections")

    test_query = st.text_input(
        "Nh·∫≠p c√¢u h·ªèi ƒë·ªÉ test:",
        placeholder="VD: T√¨nh h√¨nh kinh t·∫ø Vi·ªát Nam"
    )

    k_results = st.slider("S·ªë l∆∞·ª£ng k·∫øt qu·∫£:", min_value=1, max_value=10, value=3)

    if st.button("üöÄ Ch·∫°y Test Query") and test_query:
        with st.spinner("ƒêang truy v·∫•n t·∫•t c·∫£ collections..."):
            try:
                results = multi_db.query_all_models(test_query, k=k_results)
                
                for model_name, docs in results.items():
                    st.write(f"### K·∫øt qu·∫£ t·ª´ {model_name.upper()} ({len(docs)} documents)")
                    
                    if docs:
                        for i, doc in enumerate(docs, 1):
                            with st.expander(f"Document {i}: {doc.metadata.get('title', 'No title')[:100]}..."):
                                st.write(f"**Source:** {doc.metadata.get('source', 'Unknown')}")
                                st.write(f"**Content:** {doc.page_content[:300]}...")
                                st.json(doc.metadata)
                    else:
                        st.warning(f"Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o cho {model_name}")
                        
                    st.divider()
                    
            except Exception as e:
                st.error(f"L·ªói khi test query: {e}")

    # --- Qu·∫£n l√Ω Collections --- #
    st.subheader("üõ†Ô∏è Qu·∫£n l√Ω Collections")

    st.warning("‚ö†Ô∏è **C·∫£nh b√°o:** C√°c thao t√°c b√™n d∆∞·ªõi s·∫Ω thay ƒë·ªïi d·ªØ li·ªáu trong database.")

    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üóëÔ∏è X√≥a t·∫•t c·∫£ Collections", type="secondary"):
            if st.checkbox("T√¥i hi·ªÉu r·ªßi ro v√† mu·ªën x√≥a t·∫•t c·∫£"):
                try:
                    multi_db.delete_all_collections()
                    st.success("ƒê√£ x√≥a t·∫•t c·∫£ collections!")
                    st.cache_resource.clear()
                    st.rerun()
                except Exception as e:
                    st.error(f"L·ªói khi x√≥a: {e}")

    with col2:
        selected_model = st.selectbox(
            "Ch·ªçn model ƒë·ªÉ x√≥a:",
            options=list(settings.EMBEDDING_MODELS.keys())
        )
        
        if st.button(f"üóëÔ∏è X√≥a Collection {selected_model}"):
            if st.checkbox(f"X√≥a collection {selected_model}"):
                try:
                    db_manager = multi_db.get_db_manager(selected_model)
                    if db_manager:
                        db_manager.delete_collection()
                        st.success(f"ƒê√£ x√≥a collection {selected_model}!")
                        st.cache_resource.clear()
                        st.rerun()
                except Exception as e:
                    st.error(f"L·ªói khi x√≥a: {e}")

    with col3:
        st.write("**Rebuild Collections**")
        if st.button("üîÑ Rebuild t·ª´ d·ªØ li·ªáu"):
            st.info("Ch·ª©c nƒÉng n√†y c·∫ßn ƒë∆∞·ª£c implement trong data_ingestion pipeline")

    # --- Footer --- #
    st.divider()
    st.caption("üí° **Tip:** S·ª≠ d·ª•ng trang n√†y ƒë·ªÉ ki·ªÉm tra v√† so s√°nh hi·ªáu su·∫•t c·ªßa c√°c embedding models kh√°c nhau.")

# Ch·∫°y interface n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if __name__ == "__main__":
    run_collection_manager()
